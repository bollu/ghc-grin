/*
  HINT: is interpreted -/+

  primop effectful
    + "newMutVar#"   :: %a -> {"State#" %s} -> {"GHC.Prim.Unit#" {"MutVar#" %s %a}}
    + "readMutVar#"  :: {"MutVar#" %s %a} -> {"State#" %s} -> {"GHC.Prim.Unit#" %a}
    + "writeMutVar#" :: {"MutVar#" %s %a} -> %a -> {"State#" %s} -> {"GHC.Prim.(##)"}

  primop pure
    - "sameMutVar#" :: {"MutVar#" %s %a} -> {"MutVar#" %s %a} -> T_Int64

  primop effectful
    + "atomicModifyMutVar#" :: {"MutVar#" %s %a} -> (%a -> %b) -> {"State#" %s} -> {"GHC.Prim.Unit#" %c}
    + "casMutVar#"          :: {"MutVar#" %s %a} -> %a -> %a -> {"State#" %s} -> {"GHC.Prim.(#,#)" T_Int64 %a}

  NOTE: MutVar# is modeled as an Array
*/

// "newMutVar#" :: %a -> {"State#" %s} -> {"GHC.Prim.Unit#" {"MutVar#" %s %a}}
// new array
Array(r, ty_node, item) :-
  op = "newMutVar#",
  Call(r, op, _),
  // initial item
  CallArgument(r, 0, item),
  // extract result node
  RetTup1Node0(op, ty_node).

// "readMutVar#" :: {"MutVar#" %s %a} -> {"State#" %s} -> {"GHC.Prim.Unit#" %a}
TypeVarPointsTo(r, ty_node, item) :-
  op = "readMutVar#",
  Call(r, op, _),
  // lookup array items
  CallArgument(r, 0, arr),
  ExternalOrigin(arr, ext_result, arr_node),
  Array(ext_result, arr_node, item),
  // lookup result node
  RetTup1Node0(op, ty_node).

// "writeMutVar#" :: {"MutVar#" %s %a} -> %a -> {"State#" %s} -> {"GHC.Prim.(##)"}
// extend array
Array(ext_result, ty_node, item) :-
  op = "writeMutVar#",
  Call(r, op, _),
  // item to write
  CallArgument(r, 1, item),
  // lookup array
  CallArgument(r, 0, arr),
  ExternalOrigin(arr, ext_result, ty_node),
  // validation
  Array(ext_result, ty_node, _).

// "atomicModifyMutVar#" :: {"MutVar#" %s %a} -> (%a -> %b) -> {"State#" %s} -> {"GHC.Prim.Unit#" %c}
// TODO: check how atomicModifyMutVar# works, this type signature does not reflect its semantics

// "casMutVar#" :: {"MutVar#" %s %a} -> %a -> %a -> {"State#" %s} -> {"GHC.Prim.(#,#)" T_Int64 %a}
// extend array
TypeVarPointsTo(r, ty_node, new_item),
TypeVarPointsTo(r, ty_node, old_item),
Array(ext_result, arr_node, new_item) :-
  op = "casMutVar#",
  Call(r, op, _),
  // old item
  CallArgument(r, 1, old_item),
  // new item
  CallArgument(r, 2, new_item),
  // lookup array
  CallArgument(r, 0, arr),
  ExternalOrigin(arr, ext_result, arr_node),
  // validation
  Array(ext_result, arr_node, _),
  // extract result node
  RetTup(op, "GHC.Prim.(#,#)", 1, ty_node).
