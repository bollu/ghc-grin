// catch# + raise# + raiseIO#

.decl RaisedEx(f:Variable)
.output RaisedEx

RaisedEx(ex) :-
  (Call(r, "raise#", _) ; Call(r, "raiseIO#", _)),
  CallArgument(r, 0, ex).

IsInterpreted("raise#").
IsInterpreted("raiseIO#").
IsInterpreted("catch#").

// handle the wrapped function
Called(r, fun),
TypeVarPointsTo(r, ty_res_value, fun_ret),  // handle return value
PointsTo(fun_arg_0, v2) :-  // pass realworld
  Call(r, "catch#", _),
  // pass argument to the wrapped function
  CallArgument(r, 0, v0),
  PNode(v0, fun, fun_arity, 1),
  CodeParameter(fun, fun_arity-1, fun_arg_0),
  CallArgument(r, 2, v2),
  // return value
  ExternalReturnType("catch#", ty_res),
  TypeNode(ty_res, "GHC.Prim.Unit#"),
  TypeNodeArgument(ty_res, 0, ty_res_value),
  IsTypeVariable(ty_res_value), // extra validation
  ReturnValue(fun, fun_ret).

// handle ex-handler
Called(r, handler),
TypeVarPointsTo(r, ty_res_value, handler_ret),     // handle return value
PointsTo(handler_arg_0, ex),  // pass exceptions
PointsTo(handler_arg_1, v2):- // pass realworld
  Call(r, "catch#", _),
  // pass argument to the handler function
  CallArgument(r, 1, v1),
  CallArgument(r, 2, v2),
  PNode(v1, handler, handler_arity, 2),
  CodeParameter(handler, handler_arity-2, handler_arg_0),
  CodeParameter(handler, handler_arity-1, handler_arg_1),
  RaisedEx(ex),
  // return value
  ExternalReturnType("catch#", ty_res),
  TypeNode(ty_res, "GHC.Prim.Unit#"),
  TypeNodeArgument(ty_res, 0, ty_res_value),
  IsTypeVariable(ty_res_value), // extra validation
  ReturnValue(handler, handler_ret).
