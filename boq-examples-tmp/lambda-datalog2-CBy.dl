/*
  Handles:
    - genuine value origins
    - pattern matching
*/

// origin: node or external
.decl NodeOrigin(v:CodeName, value:CodeName)
.decl ExternalOrigin(v:CodeName, ext_result:Variable, ty_var:Variable)

.output NodeOrigin
.output ExternalOrigin

/*
  SECTION: calling a constructor
    handle stg style constructor calling:
      let   con = [tag a b c]
      letS  val = con $
*/
NodeOrigin(r, val) :-
  Call(r, f, 0),
  EvalMode(r, "strict"),
  NodeOrigin(f, val),
  Node(val, _).

// SECTION: Origin

NodeOrigin(n, n) :- Node(n, _).

ExternalOrigin(r, r, ty_node) :-
  Call(r, f, _),
  EvalMode(r, "strict"),
  ExternalFunction(f, _, _),
  ExternalReturnType(f, ty_node).

// Move
PointsTo(result, value) :- Move(result, value).

// SECTION: Case + Alt

// scrutinee projection to alt value ; NodeOrigin
PointsTo(alt_val, scrut_val) :-
  Case(case_result, scrut),
  Alt(case_result, alt_val, tag),
  NodeOrigin(scrut, scrut_val),
  Node(scrut_val, tag).

// scrutinee projection to alt value ; ExternalOrigin
ExternalOrigin(alt_val, ext_result, ty_var) :-
  Case(case_result, scrut),
  Alt(case_result, alt_val, tag),
  ExternalOrigin(scrut, ext_result, ty_var),
  TypeNode(ty_var, tag).

// alt params from Node
PointsTo(p, val) :-
  Alt(_, alt, tag),
  AltParameter(alt, i, p),
  NodeOrigin(alt, node),
  Node(node, tag),
  NodeArgument(node, i, val).

// alt params from External (i.e. ... -> {"GHC.Prim.Unit#" %a} or ... -> {"GHC.Prim.Unit#" T_Int})
ExternalOrigin(p, ext_result, ty_var) :-
  Alt(_, alt, tag),
  AltParameter(alt, i, p),
  ExternalOrigin(alt, ext_result, ty_node),
  TypeNode(ty_node, tag),
  TypeNodeArgument(ty_node, i, ty_var).

// alt result
PointsTo(case_result, val) :-
  Case(case_result, _),
  Alt(case_result, alt, _),
  ReturnValue(alt, val).

/*
  TODO:
    - handle default alternatives
*/

/*
  Question:
    Do we need to distinct external and interpreted-external origins?
    Does this makes difference in perfomrmance?
*/
