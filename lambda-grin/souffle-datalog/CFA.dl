/*
  Handles:
    - function calls
    - partial applications
*/

/*
  control flow analysis

  each value can be:
    - constructor (node) ; collected data: source instruction name
    - partially applied function / closure ;
      NOTE:
        partial application requires computation and the computattion details need to be recorded
        collected data: apply chain; how application evolves and got saturated and results new values


  decls
    ApplyChain

    Q: how to normalize/reduce apply chain?
       how do we know the final result of it?

  decl
    PNode : store the result of apply chain if it is still a partial application

  Node and PNode is the normal form

  Idea: use points-to relation for simple way value passing

*/
.decl ApplyChain(v:Variable, f:CodeName, step:number, consumed:number, arg_count:number)

.decl PNode(v:Variable, fun:CodeName, arity:number, remained:number)
.decl PNodeArgument(v:Variable, fun:CodeName, i:number, value:CodeName)

.decl Called(instruction:Variable, f:CodeName)

.output PNode
.output PNodeArgument
.output ApplyChain
.output Called

/*
  apply chain
    origin cases:
    - calling known function
    - calling PNode

    step cases:
    - extend same PNode ; add more arguments but still understaurated
    - PNode got saturated without leftover arguments
    - PNode got saturated, still remain some argument ; call function then apply the remained arguments to the function result

  IDEA:
    - build ApplyChains
    - propagate call/PNode arguments to function parameters

  Design Idea:
    - the function in apply chain refers to the function which result sould be used to create the next link
    - function parameters are applied by the rule that creates the ApplyChain value
*/

// create PNodes for referred functions in call or node argument or in move
PNode(f, f, arity, arity) :-
  ( IsFunction(f)
  ; IsClosure(f)
  ),
  ( CallArgument(_, _, f)
  ; NodeArgument(_, _, f)
  ; Move(_, f)
  ; ReturnValue(_, f)
  ),
  CodeArity(f, arity).

/*
  NOTE:
    separate return value and parameter handling
      parameters are optional, so they absence can block the return value handling

    separate PNode and PNodeArgument: PNodeArguments are optionalm, so they can block PNode handling
*/

// strict, saturated, known function/closure call: execute function call
Called(r, f),
PointsTo(r, ret_var) :- // return value
  REACHABLE(r)
  Call(r, f, arg_count),
  EvalMode(r, "strict"),
  CodeArity(f, arity),  // arity is only for known callables
  arg_count = arity,
  ReturnValue(f, ret_var).
PointsTo(param, arg) :- // pass arguments to function parameters
  REACHABLE(r)
  Call(r, f, arg_count),
  EvalMode(r, "strict"),
  CodeArity(f, arity),  // arity is only for known callables
  arg_count = arity,
  CallArgument(r, call_arg_i, arg),
  CodeParameter(f, call_arg_i, param).

// strict, undersaturated known call: create PNode
PNode(r, f, arity, arity - arg_count) :-
  REACHABLE(r)
  Call(r, f, arg_count),
  EvalMode(r, "strict"),
  CodeArity(f, arity),  // arity is only for known callables
  arg_count < arity.
PNodeArgument(r, f, arg_i, arg_value) :-
  REACHABLE(r)
  Call(r, f, arg_count),
  EvalMode(r, "strict"),
  CodeArity(f, arity),  // arity is only for known callables
  arg_count < arity,
  CallArgument(r, arg_i, arg_value).

// strict, saturated PNode call: execute function call
Called(r, f),
PointsTo(r, ret_var) :- // return value
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, f, _, missing),
  arg_count = missing,
  // return value
  ReturnValue(f, ret_var).
PointsTo(param, arg) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, fun, arity, missing),
  arg_count = missing,
  // call parameters
  CallArgument(r, call_arg_i, arg),
  CodeParameter(fun, call_arg_i + arity - missing, param).
PointsTo(bound_param, pnode_arg) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, fun, _, missing),
  arg_count = missing,
  // pnode parameters
  PNodeArgument(pnode, fun, pnode_i, pnode_arg),
  CodeParameter(fun, pnode_i, bound_param).

// strict, undersaturated PNode call: create PNode
PNode(r, f, arity, missing - arg_count) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, f, arity, missing),
  arg_count < missing.
PNodeArgument(r, f, arity - missing + arg_i, arg_value) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, f, arity, missing),
  arg_count < missing,
  // new pnode aruments
  CallArgument(r, arg_i, arg_value).
PNodeArgument(r, f, bound_i, bound_value) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, f, _, missing),
  arg_count < missing,
  // copy old pnode arguments
  PNodeArgument(pnode, f, bound_i, bound_value).

// strict, oversaturated, known function/closure call: execute function call + create ApplyChain
Called(r, f),
ApplyChain(r, f, 0, arity, arg_count) :-
  REACHABLE(r)
  Call(r, f, arg_count),
  EvalMode(r, "strict"),
  CodeArity(f, arity),  // arity is only for known callables
  arg_count > arity.
PointsTo(param, arg) :- // pass arguments to function parameters
  REACHABLE(r)
  Call(r, f, arg_count),
  EvalMode(r, "strict"),
  CodeArity(f, arity),  // arity is only for known callables
  arg_count > arity,
  // call parameters
  call_arg_i < arity,
  CallArgument(r, call_arg_i, arg),
  CodeParameter(f, call_arg_i, param).

// strict, oversaturated PNode call: execute function call + create ApplyChain
// BUGFIX: does not pass arguments
Called(r, fun),
ApplyChain(r, fun, 0, arity - missing, arg_count) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, fun, arity, missing),
  arg_count > missing.
PointsTo(bound_param, pnode_arg) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, fun, _, missing),
  arg_count > missing,
  // pnode parameters
  PNodeArgument(pnode, fun, pnode_i, pnode_arg),
  CodeParameter(fun, pnode_i, bound_param).
PointsTo(param, arg) :-
  REACHABLE(r)
  Call(r, pnode, arg_count),
  EvalMode(r, "strict"),
  PNode(pnode, fun, arity, missing),
  arg_count > missing,
  // call parameters
  call_arg_i < missing, // BUG
  CallArgument(r, call_arg_i, arg),
  CodeParameter(fun, call_arg_i + arity - missing, param).

// SECTION: apply chain elaboration: apply remained call arguments to 'f' result PNodes

// saturated apply chain link: execute function call + create result
Called(r, f), Called(r, p_f),
PointsTo(r, p_ret_var) :-             // return value
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, _, p_remained),
  consumed + p_remained = arg_count,
  // return value
  ReturnValue(p_f, p_ret_var).
PointsTo(p_old_param, p_old_value) :- // pass arguments to function parameters
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, p_arity, p_remained),
  consumed + p_remained = arg_count,
  // pass old pnode arguments
  bound_i < p_arity - p_remained,
  CodeParameter(p_f, bound_i, p_old_param),
  PNodeArgument(ret_var, p_f, bound_i, p_old_value).
PointsTo(p_new_param, arg) :-       // pass arguments to function parameters
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, p_arity, p_remained),
  consumed + p_remained = arg_count,
  // pass new call arguments
  call_arg_i >= consumed,
  call_arg_i < arg_count,
  CallArgument(r, call_arg_i, arg),
  CodeParameter(p_f, (p_arity - p_remained) + (call_arg_i - consumed), p_new_param).

// undersaturated apply chain link: create PNode result
PNode(r, p_f, p_arity, p_remained - (arg_count - consumed)) :-
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, p_arity, p_remained),
  p_remained > arg_count - consumed.
PNodeArgument(r, p_f, (p_arity - p_remained) + (call_arg_i - consumed), arg_value) :- // new arguments
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, p_arity, p_remained),
  p_remained > arg_count - consumed,
  // copy call arguments
  call_arg_i >= consumed,
  call_arg_i < arg_count,
  CallArgument(r, call_arg_i, arg_value).
PNodeArgument(r, p_f, bound_i, bound_value) :-                                       // old arguments
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, _, p_remained),
  p_remained > arg_count - consumed,
  // copy old pnode arguments
  PNodeArgument(ret_var, p_f, bound_i, bound_value).

// oversaturated apply chain link: execute function + create the next ApplyChain link
Called(r, f), Called(r, p_f),
ApplyChain(r, p_f, step + 1, consumed + p_remained, arg_count) :-
  REACHABLE(r)
  ApplyChain(r, f, step, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, _, p_remained),
  p_remained < arg_count - consumed.
PointsTo(p_old_param, p_old_value) :- // pass arguments to function parameters
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, p_arity, p_remained),
  p_remained < arg_count - consumed,
  // pass old pnode arguments
  bound_i < p_arity - p_remained,
  CodeParameter(p_f, bound_i, p_old_param),
  PNodeArgument(ret_var, p_f, bound_i, p_old_value).
PointsTo(p_new_param, arg) :-         // pass arguments to function parameters
  REACHABLE(r)
  ApplyChain(r, f, _, consumed, arg_count),
  ReturnValue(f, ret_var),
  PNode(ret_var, p_f, p_arity, p_remained),
  p_remained < arg_count - consumed,
  // pass new call arguments
  call_arg_i >= consumed,
  call_arg_i < consumed + p_remained,
  CallArgument(r, call_arg_i, arg),
  CodeParameter(p_f, (p_arity - p_remained) + (call_arg_i - consumed), p_new_param).

///////////////////////
// utility
///////////////////////

.decl CallPNode1(inst:Variable, pnode:Variable, last_arg:Variable)
.output CallPNode1

Called(inst, fun),
PointsTo(fun_last_param, last_arg) :-
  REACHABLE(inst)
  CallPNode1(inst, pnode, last_arg),
  PNode(pnode, fun, fun_arity, 1),
  // last argument
  CodeParameter(fun, fun_arity-1, fun_last_param).

PointsTo(bound_param, pnode_arg) :-
  REACHABLE(inst)
  CallPNode1(inst, pnode, _),
  PNode(pnode, fun, fun_arity, 1),
  // pnode bounded arguments
  pnode_i < fun_arity-1,
  PNodeArgument(pnode, fun, pnode_i, pnode_arg),
  CodeParameter(fun, pnode_i, bound_param).

.decl CallPNode2(inst:Variable, pnode:Variable, before_last_arg:Variable, last_arg:Variable)
.output CallPNode2

Called(inst, fun),
PointsTo(fun_last_param, last_arg),
PointsTo(fun_before_last_param, before_last_arg) :-
  REACHABLE(inst)
  CallPNode2(inst, pnode, before_last_arg, last_arg),
  PNode(pnode, fun, fun_arity, 2),
  // last 2 argument
  CodeParameter(fun, fun_arity-2, fun_before_last_param),
  CodeParameter(fun, fun_arity-1, fun_last_param).

PointsTo(bound_param, pnode_arg) :-
  REACHABLE(inst)
  CallPNode2(inst, pnode, _, _),
  PNode(pnode, fun, fun_arity, 2),
  // pnode bounded arguments
  pnode_i < fun_arity-2,
  PNodeArgument(pnode, fun, pnode_i, pnode_arg),
  CodeParameter(fun, pnode_i, bound_param).
