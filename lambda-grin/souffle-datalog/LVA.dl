// reachibility
.decl InitialReachable(n:CodeName)
.input InitialReachable

// hardcoded edb
//InitialReachable("::Main.main").
//InitialReachable(":Main.main").
//InitialReachable("Main.main").

// Call tree
.decl CalledCode(caller:CodeName, callee:CodeName)
.output CalledCode

Used("LVA-01"),
CalledCode(caller, callee) :-
  HasInst(caller, r), // NOTE: alts can be callers ; needs fix to include the function or closure?
  Called(r, callee).

// SECTION: reachability

.decl ReachableCode(n:CodeName)
.output ReachableCode

Used("LVA-02"),
ReachableCode(n) :-
  InitialReachable(n).

// call
Used("LVA-03"),
ReachableCode(callee) :-
  ReachableCode(caller),
  CalledCode(caller, callee).

// alt ; tag sensitive
Used("LVA-04"),
ReachableCode(alt) :-
  ReachableCode(f),
  HasInst(f, r),
  // default case is always reachable
  Alt(r, alt, "default:").

Used("LVA-05"),
ReachableCode(alt) :-
  ReachableCode(f),
  HasInst(f, r),
  Alt(r, alt, t),
  // is the tag created somewhere?
  TagValue(alt, t).


.decl Reachable(inst:Variable)
.output Reachable

Used("LVA-06"),
Reachable(inst) :-
  HasInst(f, inst),
  ReachableCode(f).


.decl TagValue(v:Variable, t:Tag)
.output TagValue

Used("LVA-07"),
TagValue(v, tag) :-
  NodeOrigin(v, node),
  Node(node, tag).

Used("LVA-08"),
TagValue(v, tag) :-
  ExternalOrigin(v, _, ty_var),
  TypeNode(ty_var, tag).

// SECTION: dead code

.decl DeadCode(n:CodeName)
.output DeadCode

Used("LVA-09"),
DeadCode(n) :-
  ReturnValue(n, _),
  !ReachableCode(n).

.decl DeadExternal(n:External)
.output DeadExternal

.decl ReachableExternal(n:External)
.output ReachableExternal

Used("LVA-10"),
ReachableExternal(callee) :-
  ReachableCode(caller),
  ExternalFunction(callee, _, _),
  CalledCode(caller, callee).

Used("LVA-11"),
DeadExternal(n) :-
  ExternalFunction(n, _, _),
  !ReachableExternal(n).

//////

.decl HasCallOp(code:CodeName)
.output HasCallOp

Used("LVA-12"),
HasCallOp(code) :-
  ReturnValue(code, _),
  HasInst(code, r),
  Call(r, _, _).

Used("LVA-13"),
HasCallOp(code) :- // flatten alts
  HasInst(code, r),
  Alt(r, alt, _),
  HasCallOp(alt).

.decl LeafCode(code:CodeName)
.output LeafCode

Used("LVA-14"),
LeafCode(caller) :-
  HasCallOp(caller),
  !Alt(_, caller, _),
  !CalledCode(caller, _).

/////////////////////////////////

/*
  check:
    - reachable case
    - no matching alternative
    - without default pattern
*/

